Week 1:

Design principles:
Prototype: focus on goals and modify the prototype
prototype is developed upon questions, there might be multiple of them
Prototype Rights:
- Should not be required to be complete
- Should be easy to change
- Gets to retire
- You could create different prototypes to ask different questions
- Ask questions; Used to aquire knowledge, otherwise it'll be a waste of time; ask the thornic question and learn the hard stuff first and quickly (questions such as "how big should the button be like")

"The best way to have a good idea is to have lots of ideas"

Release point: depend on the cost to change them

How to evaluate design?

-Usability Studies: (from formal to informal) common and straigntforward way to fix bugs
shortcoming:
ignore the physical settings around the users when they use the product
might be nicer under the watch of the lab persons
not knowing if the users will behave differently if provided a different interface
have to bring people to your place
Controlled experiment: can limit the real-world applicability when they are done in a contrived lab setting
Survey: good at collecting responses from a lot of users, relatively easy to compare among alternatives; problem is that people's saying and doing don't always match each other
Feedback from Experts: Peer Critique, Dogfooding, Heurtisitc Evaluation.

-Participant Observation & Comparative Experiments: gaining insights by discovering actual practices, as opposed to self-report

Simulation & Formal Models


The Birth of HCI:

The book - "As We May Think" Vannevar Bush (MIT->Stanford)
future interactive desk: he called this system "Memex"
Grace Hopper (woman): invented first compiler
The GUI: key - MIT Lincoln Labs by Ivan Sutherland
Mouse & Hypertext - Doug Engelbart (famous 1968 demo: mouse); Doug inspires Alan Kay; "the best way to predict the future is to invent it"; at Alan Xerox PARC start building the real GUI, released STAR computing system in 1981
The "long nose" of innovation (Buxton)



Week 2:

Needfinding strategies:

Participant Observation:
observing people
Tacit knowledge: deep hanging out
- Pay attention to all the artifacts
- Look for workaround and hacks
- "Errors" are a gold mine
- Simply asking people what they want instead of observing their behavior, would be easily distracted
- Try & Do; Ask & Listen; Watch & Observe

Interview:
- Choosing Participants (representative of the target users; maybe current users of a similar system; might also be non-users from whom we can learn about the barrier); you may choose your family & friends to spread the "net" for you and get your subjects; approximate if necessary (you might not know the final user group); it is IMPORTANT to be CURIOUS, for it is not good to think something is obvious, or nothing to be improved about, "find the story", power and knowledge aren't the same, start in the middle instead of the top, not being too self-conscious; find out "what would you like in a tool", not ask them how would they improve it (a car, not a faster horse might be the best design); do not ask about feelings such as "like", and avoid questions such as frequencies so that interviewers won't over-estimate themselves, avoid asking people about sth. like how much they like things at an absolute scale (not reliable), and no binary(yes/no) questions; open-ended questions should be encouraged.
- Silence is Golden: Give a quick answer, give people a few seconds (minutes?) to response

Additional Needfinding Strategies:
- Diary Studies: give people diary they complete at a specific time / interval; might be redio recording or mobile phone; features easier to record, results better; follow up and remind them; would have better results if the participants are well-trained, better than observation because the amount of data collected is much larger, for you don't need to be at present
- Experiment Sampling /"paper studies": beep people at specific time and ask them to record something

advanced users / lead users are different from other users, such as (MIT) Eric Van Hipple, e.g. "Nat rack" individual ->general; they are creative engines
extreme users: learn from them and help everyone

"Personas":
- model of person; example
- draw a picture of personas (background info, hope, dream, goal, a story to tell etc.)
- help build empathy by looking into their need, feel, think...


"All design is redesign"
what are the pain points? what are the steps / goal/ artifacts?

Challenge: we design artifacts, not activities / tasks




Week 3: Rapid Prototyping

Prototyping: Intro - Storyboards, Paper Prototypes, and Mockups
Use Stage-Appropriate Tools
start from low fidelity prototyping techniques
- Storyboards: takes you from the setting to satisfaction
- Paper Prototypes
- Digital Mockups
- Interactive Project with hard content (and latter on add in database to complete it)

Story Board should contain:
- Setting:
---- People Involved
---- Environment
---- Task to be accomplished
- Sequence:
---- Steps Involved
---- What leads someone to use it
---- Task being Illustrated
- Satisfaction:
---- What motivates people to use the system
---- What does it enables people to accomplish
---- What need does the system fill

emphasizes how to "accomplish" a task; not to stick to particular interface

paper interface: could rapidly change

Wizard of Oz Prototyping (tests): cheap and fast, requires some interface, not necessarily coding
earlier stage: paper would be the best
- Map out scenarios and application flow (interactive)
- Put together interface "skeletons"
- Develop "hooks" for wizard input
- Where and how the wizard will provide input (actions / what kind of input; to be replaced by computer)
- Rehearse wizard role with a colleague
e.g. Aardvark
Running Wizard-Powered Prototypes:
- Friend -> User
- Two Roles: Facilitator (provides tasks (paper), take notes); Wizard (operate interface)
Video Prototyping: a protoyyping method
- Cheap & Fast
- Communicating ideas (could be informal brainstorm or could be quite formal)
- A 'spec' for developers
- Tie interface design to tasks
- Like a Storyboard, a whole task, including motivation and success
- Help create a minimum-variable product based on tasks
- Change the way the team discuss
- Should try to use as much as possible the real context of use (people, location)

Creating and Comparing Alternatives: Steven Dow
Quality vs. Quantity: quantity - learn from mistakes; quality - seek for perfection and theory
people always pick up one solution early on and stick to it
Functional Fixation
force people to come up more ideas: parallel design prototyping; Parallel Prototyping is better than Serial one for it makes people more creative, yield better results; for more clicks --- Share Multiple > Share One > Share Best



Week 4:

Heuristic Evaluation: a technique (Jakob Nielsen)
having a small set (3-5) of evaluaters examine the UI, each independently check for compliance with usability principles (Heuristics), different evaluators will find different problems, not to communicate until afterwards (and the findings are then aggregated); may miss problem and find "false possitive"

it is a way of peer critiques: useful; not to waste the user

https://www.nngroup.com/articles/how-to-conduct-a-heuristic-evaluation/

seperate listing, do not repeat, do not let people simply say that they don't like it

severity rating: (frequency, impact, persistence would be combined)
- independently estimate after review 
- allocate resources to fix problems
- estimate need for more usability effort

Visibe
- Show: Time; tell the users that the process is undergoing
- Show: Space (run out of space)
- Show: Change
- Show: Action
- Show: Next Steps
- Show: Completion

Familiar Metaphore / Languages
- also Familiar Categories, Choices

User Control & Freedom: the amount that they could control should be reasonable

Consistency & Standard: users shouldn't need to worry about whether different things have the same meaning
- Bottoms at consistent locations
- Consistent Names (e.g. business categories are different from user categories)
- Be aware of which terminology the users use naturally; A way to do it is to let users input "other"
- Specific choices might be better than that of "Yes"/"No" or "Ok"/"Cancel"

Error Prevention
- Prevent Data Loss (e.g. warn when overwrite)
- Prevent Clutter (Cluttering Duplicates - recorded twice)
- Prevent Confusing Flow (e.g. choices with vague meanings)
- Prevent Bad Input (e.g. Format, range)
- Prevent Unnecessary Constraints (avoid being that "you must select ... to begin your searching")

Recognition Over Recall
- Create things easily retrievable or instructions visible, so as to minimize the user's memory load; users shouldn't have to remember information from one place (part of the dialogue) to another
- Recognition: avoid codes
- Recognition: avoid extra hurdles
- Recognition with Previews

Flexibility & Efficiency
- Flexible Shortcuts (e.g. Keyboard Shortcuts)
- Flexible Default with Options (e.g. let the users be able to input the content of "others")
- Flexible: Ambient Information (e.g. weather)
- Flexible proactivity (clear, efficient interface)
- Flexibility: Recommendations (e.g. what other products you might also interested in)
- Flexibility: Keep it Relevant (e.g. links on the buttom)
- could be an extension of minimalism

(Minimalism)
Aesthetic & Minimalist Design
- Minimalism: "Above the fold" (view one screen at a time, this is what we call the view on the top of the index page - the idea is from the newspaper; better to have core information there)
- Minimalism: Signal-to-Noise (too many information for no apparant purpose / too many different colors) (other information = noise, should be stripped out)
- Minimalist Login (the easier and clearer, the better)
- Minimalism: Redundancy
- Minimalism: Functionality

Recognize, Diagnose, & Recover from Errors: help people do so
- Errors: make the problem clear (highlight the specific error made)
- Errors: provide a solution
- Errors: show a path forward
- Errors: propose an alternative
- Recognize Errors

Help
- help & documents
- Help learning with examples
- Help choices with examples
- Help guide the way (tell you where the problem is)
- Help Show the Steps (e.g. PSE: Adobe Photoshop Elements)
- Help point things out (New trent: combine Help directly into the user interface)
- Help provide more information (e.g. while a checkbox is checked, shown more lines)
- Help clearly
- Help people have fun

